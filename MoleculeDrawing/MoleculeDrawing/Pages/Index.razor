@page "/"
@inject IJSRuntime JSRuntime



@for (int i = 0; i <= Graph.EdgeList.Edges.Count() - 1; i++)
{
    <svg width="2000" height="1000" style="position: absolute; left: 0px; top: 0px; z-index:-1">
        @{
            int local = i;
            int weight;
            if (Int32.TryParse(Graph.EdgeList.Edges[i].Weight, out weight))
            {
                weight = weight * 5 - 4;
                <line x1="@((int)Graph.EdgeList.Edges[i].Node1.Position.X)"
                      y1="@((int)Graph.EdgeList.Edges[i].Node1.Position.Y)"
                      x2="@((int)Graph.EdgeList.Edges[i].Node2.Position.X)"
                      y2="@((int)Graph.EdgeList.Edges[i].Node2.Position.Y)"
                      stroke="@Graph.EdgeList.Edges[i].Colour"
                      style="stroke-width: @weight"></line>
                while (weight >= 3)
                {
                    weight -= 2;
                    <svg>
                        <line x1="@((int)Graph.EdgeList.Edges[i].Node1.Position.X)"
                              y1="@((int)Graph.EdgeList.Edges[i].Node1.Position.Y)"
                              x2="@((int)Graph.EdgeList.Edges[i].Node2.Position.X)"
                              y2="@((int)Graph.EdgeList.Edges[i].Node2.Position.Y)"
                              stroke="#ffffff"
                              style="stroke-width: @weight;"></line>
                    </svg>

                    weight -= 8;

                    if (weight >= 1)
                    {
                        <svg>
                            <line x1="@((int)Graph.EdgeList.Edges[i].Node1.Position.X)"
                                  y1="@((int)Graph.EdgeList.Edges[i].Node1.Position.Y)"
                                  x2="@((int)Graph.EdgeList.Edges[i].Node2.Position.X)"
                                  y2="@((int)Graph.EdgeList.Edges[i].Node2.Position.Y)"
                                  stroke="@Graph.EdgeList.Edges[i].Colour"
                                  style="stroke-width: @weight;"></line>
                        </svg>
                    }
                }
            }
        }
    </svg>
    //int local = i;
    //string style = "position: absolute; left: " + (int)((Graph.EdgeList.Edges[i].Node1.Position.X + Graph.EdgeList.Edges[i].Node2.Position.X) / 2) + "px; top: " + (int)((Graph.EdgeList.Edges[i].Node1.Position.Y + Graph.EdgeList.Edges[i].Node2.Position.Y) / 2) + "px";
    //<input class="edge-weight" type="text" @bind="Graph.EdgeList.Edges[local].Weight" style="@style" />
}

@foreach (var node in Graph.NodeList.Nodes)
{
    <span class="dot" @onclick="@((args) => NodeClick(args, node))" @onmousemove="node.Drag" style="position: absolute; z-index: 5; @node.Style">@(" ") @node.Atom</span>
}

<div class="buttons">
    <ul>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, "C"))">Carbon</button>
        </li>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, "H"))">Hydrogen</button>
        </li>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, "O"))">Oxygen</button>
        </li>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, "N"))">Nitrogen</button>
        </li>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, "Br"))">Bromine</button>
        </li>
        <li>
            <button @onclick="AddEdge">Add Bond</button>
        </li>
        <li>
            <button @onclick="Graph.Clear">Clear</button>
        </li>
        <li>
            <select @bind="OtherAtom">
                <option value="" selected disabled hidden>Other Atoms</option>
                <option value="F">Fluorine</option>
                <option value="I">Iodine</option>
                <option value="Cl">Chlorine</option>
                <option value="S">Sulfur</option>
                <option value="P">Phosphorus</option>
                <option value="Al">Aluminium</option>
            </select>
        </li>
        <li>
            <button @onclick="@((args) => Graph.AddNode(args, OtherAtom))">Add Other</button>
        </li>
    </ul>
</div>


@code{

    private string OtherAtom = "Other Atoms";

    private Graph Graph = new Graph();

    private bool makingEdge = false;
    private Edge newEdge = new Edge();

    private System.Numerics.Vector2 ScreenSize = new System.Numerics.Vector2();

    private void AddEdge(EventArgs e)
    {
        makingEdge = true;
    }

    private void NodeClick(MouseEventArgs e, Node node)
    {
        if (makingEdge)
        {
            if (newEdge.Node1 == null)
            {
                newEdge.Node1 = node;
            }
            else
            {
                newEdge.Node2 = node;
                Graph.AddEdge(newEdge);
                newEdge = new Edge();
                makingEdge = false;
            }
        }
        else
        {
            node.Click();
        }
    }

    [JSInvokable("Rerender")]
    public void Rerender()
    {
        this.StateHasChanged();
    }

    [JSInvokable("SetScreenSize")]
    public void SetScreenSize(float x, float y)
    {
        ScreenSize = new System.Numerics.Vector2(x, y);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("jsTimer", dotNetReference);
            //JSRuntime.InvokeVoidAsync("getScreenSize", dotNetReference);


        }
    }


        }
